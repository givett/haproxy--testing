#---------------------------------------
#
#---------------------------------------
global
      	log /dev/log    local0
        log /dev/log    local1 notice
        chroot /var/lib/haproxy

        # maximum number of simutaneous active connections
        maxconn 4096

        # run in the background
        daemon
				user haproxy
        group haproxy

        # for restarts  ??? do we need this?
        #pidfile /var/run/haproxy.pid

        # Logging to syslog facility local0  ??? do we need this?
        #log    127.0.0.1	local0
        #stats socket /var/run/haproxy.stat mode 777

        # Distribute the health checks with a bit of randomness  ??? do we need this?
        spread-checks 5

        # Uncomment the statement below to turn on verbose logging
        debug

#---------------------------------------------------------------------
# common defaults that all the 'listen' and 'backend' sections will
# use if not designated in their block
#---------------------------------------------------------------------
defaults
        # apply log settings from the global section above to services
        log             global

        # Proxy incoming traffic as HTTP requests
        # Will pass HTTP requests to the servers listed
        mode            http

        # Unfortunately, per the haproxy docs, connection-based load balancing is
        # not a good strategy for HTTP
        # Use roundrobin strategy for distributing load amongst the servers
        balance roundrobin

        # Maximum number of simultaneous active connections from an upstram web server
        # per service
        maxconn         2000

        # Log details about HTTP requests
        option          httplog

        # Abort request if client closes its output channel while waiting for the
        # request.  HAProxy documentation has a long explanation for this option.
        option          abortonclose

        # Check if a "Connection: close" header is already set in each direction.
        # and will add one if missing.  Also add X-Forwarded-For header
        # forwardfor - Adds the X-Forwarded-For header so our applications can get the
        # actual IP address
        option          httpclose
        option          forwardfor

        # IF sending a request to one server fails, try to send it to another, 3 times
        # before aborting the request
        retries         3

        # Do not enforce session affinity (i.e., an HTTP session can be served by
        # any Mongrel, not just the one that started the session
        option          redispatch

        # Keep timeouts at web speed, since this balancer sits in front of everything
        # Backends will force timeout faster if needed.
        timeout         client          1m
        timeout         connect         30s
        timeout         server          1m

        # For the frontend balancer, check the health of haproxy monitor URL.
        # This avoids a double-check; haproxy will say 503 if backends are 503
        #option         httpchk         HEAD /haproxy?monitor HTTP/1.0
        #option         httpchk         HEAD / HTTP/1.0

        # Prevous code: option httpchk /check.html	# Checks backend servers & /check.html.
        # If not a valid 200, marks server as down.

        # Amount of time after which a health check is considered to have timed out
        timeout         check           5s

        # Enable the statistics page
        # enable - Optional:  Enables stats interface - HAProxy web tool for monitoring LB and nodes
        # uri - Optional:  Statistics URL: http://52.3.205.155/haproxy?stats
				stats           enable
        stats           uri             /haproxy?stats
        #stats          realm           Haproxy\ Statistics
        #stats          auth            admin:yourpasswordhere
        #stats          refresh         5s

        #option         dontlognull

frontend haproxy_in     # where HAProxy listens to connections
        # HAProxy will listen on port 80 on each available network for new HTTP connections
        bind *:80

        # This frontend should use the backend named haproxy_http
        default_backend haproxy_http

backend haproxy_http    # where HAProxy sends incoming connections
        # When enabled, visiting http://52.3.205.155/haproxy provides a success 200 if the haproxy service is working
        #monitor-uri /haproxy?monitor
        #monitor fail if

        server vm1 52.72.55.155:8070 check	# fall 3 rise 2
                # check - Perform health checks on the node
                # fall 3 - If 3 consecutive health checks fail, offline the node
                # rise 2 - If node is offline, mark online after 2 consecutive successful health checks

        server vm2 52.200.109.240:8070 check    # fall 3 rise 2
